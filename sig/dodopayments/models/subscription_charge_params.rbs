module Dodopayments
  module Models
    type subscription_charge_params =
      {
        product_price: Integer,
        adaptive_currency_fees_inclusive: bool?,
        metadata: ::Hash[Symbol, String]?,
        product_currency: Dodopayments::Models::currency?
      }
      & Dodopayments::Internal::Type::request_parameters

    class SubscriptionChargeParams < Dodopayments::Internal::Type::BaseModel
      extend Dodopayments::Internal::Type::RequestParameters::Converter
      include Dodopayments::Internal::Type::RequestParameters

      attr_accessor product_price: Integer

      attr_accessor adaptive_currency_fees_inclusive: bool?

      attr_accessor metadata: ::Hash[Symbol, String]?

      attr_accessor product_currency: Dodopayments::Models::currency?

      def initialize: (
        product_price: Integer,
        ?adaptive_currency_fees_inclusive: bool?,
        ?metadata: ::Hash[Symbol, String]?,
        ?product_currency: Dodopayments::Models::currency?,
        ?request_options: Dodopayments::request_opts
      ) -> void

      def to_hash: -> {
        product_price: Integer,
        adaptive_currency_fees_inclusive: bool?,
        metadata: ::Hash[Symbol, String]?,
        product_currency: Dodopayments::Models::currency?,
        request_options: Dodopayments::RequestOptions
      }
    end
  end
end
