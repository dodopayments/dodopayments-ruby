module Dodopayments
  module Models
    type price =
      Dodopayments::Models::Price::OneTimePrice
      | Dodopayments::Models::Price::RecurringPrice

    module Price
      extend Dodopayments::Internal::Type::Union

      type one_time_price =
        {
          currency: Dodopayments::Models::currency,
          discount: Float,
          price: Integer,
          purchasing_power_parity: bool,
          type: :one_time_price,
          pay_what_you_want: bool,
          suggested_price: Integer?,
          tax_inclusive: bool?
        }

      class OneTimePrice < Dodopayments::Internal::Type::BaseModel
        attr_accessor currency: Dodopayments::Models::currency

        attr_accessor discount: Float

        attr_accessor price: Integer

        attr_accessor purchasing_power_parity: bool

        attr_accessor type: :one_time_price

        attr_reader pay_what_you_want: bool?

        def pay_what_you_want=: (bool) -> bool

        attr_accessor suggested_price: Integer?

        attr_accessor tax_inclusive: bool?

        def initialize: (
          currency: Dodopayments::Models::currency,
          discount: Float,
          price: Integer,
          purchasing_power_parity: bool,
          ?pay_what_you_want: bool,
          ?suggested_price: Integer?,
          ?tax_inclusive: bool?,
          ?type: :one_time_price
        ) -> void

        def to_hash: -> Dodopayments::Models::Price::one_time_price
      end

      type recurring_price =
        {
          currency: Dodopayments::Models::currency,
          discount: Float,
          payment_frequency_count: Integer,
          payment_frequency_interval: Dodopayments::Models::time_interval,
          price: Integer,
          purchasing_power_parity: bool,
          subscription_period_count: Integer,
          subscription_period_interval: Dodopayments::Models::time_interval,
          type: :recurring_price,
          tax_inclusive: bool?,
          trial_period_days: Integer
        }

      class RecurringPrice < Dodopayments::Internal::Type::BaseModel
        attr_accessor currency: Dodopayments::Models::currency

        attr_accessor discount: Float

        attr_accessor payment_frequency_count: Integer

        attr_accessor payment_frequency_interval: Dodopayments::Models::time_interval

        attr_accessor price: Integer

        attr_accessor purchasing_power_parity: bool

        attr_accessor subscription_period_count: Integer

        attr_accessor subscription_period_interval: Dodopayments::Models::time_interval

        attr_accessor type: :recurring_price

        attr_accessor tax_inclusive: bool?

        attr_reader trial_period_days: Integer?

        def trial_period_days=: (Integer) -> Integer

        def initialize: (
          currency: Dodopayments::Models::currency,
          discount: Float,
          payment_frequency_count: Integer,
          payment_frequency_interval: Dodopayments::Models::time_interval,
          price: Integer,
          purchasing_power_parity: bool,
          subscription_period_count: Integer,
          subscription_period_interval: Dodopayments::Models::time_interval,
          ?tax_inclusive: bool?,
          ?trial_period_days: Integer,
          ?type: :recurring_price
        ) -> void

        def to_hash: -> Dodopayments::Models::Price::recurring_price
      end

      def self?.variants: -> [Dodopayments::Models::Price::OneTimePrice, Dodopayments::Models::Price::RecurringPrice]
    end
  end
end
