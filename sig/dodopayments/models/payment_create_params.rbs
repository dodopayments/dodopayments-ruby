module Dodopayments
  module Models
    type payment_create_params =
      {
        billing: Dodopayments::BillingAddress,
        customer: Dodopayments::Models::customer_request,
        product_cart: ::Array[Dodopayments::OneTimeProductCartItem],
        allowed_payment_method_types: ::Array[Dodopayments::Models::payment_method_types]?,
        billing_currency: Dodopayments::Models::currency?,
        discount_code: String?,
        :force_3ds => bool?,
        metadata: ::Hash[Symbol, String],
        payment_link: bool?,
        return_url: String?,
        show_saved_payment_methods: bool,
        tax_id: String?
      }
      & Dodopayments::Internal::Type::request_parameters

    class PaymentCreateParams < Dodopayments::Internal::Type::BaseModel
      extend Dodopayments::Internal::Type::RequestParameters::Converter
      include Dodopayments::Internal::Type::RequestParameters

      attr_accessor billing: Dodopayments::BillingAddress

      attr_accessor customer: Dodopayments::Models::customer_request

      attr_accessor product_cart: ::Array[Dodopayments::OneTimeProductCartItem]

      attr_accessor allowed_payment_method_types: ::Array[Dodopayments::Models::payment_method_types]?

      attr_accessor billing_currency: Dodopayments::Models::currency?

      attr_accessor discount_code: String?

      attr_accessor force_3ds: bool?

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_accessor payment_link: bool?

      attr_accessor return_url: String?

      attr_reader show_saved_payment_methods: bool?

      def show_saved_payment_methods=: (bool) -> bool

      attr_accessor tax_id: String?

      def initialize: (
        billing: Dodopayments::BillingAddress,
        customer: Dodopayments::Models::customer_request,
        product_cart: ::Array[Dodopayments::OneTimeProductCartItem],
        ?allowed_payment_method_types: ::Array[Dodopayments::Models::payment_method_types]?,
        ?billing_currency: Dodopayments::Models::currency?,
        ?discount_code: String?,
        ?force_3ds: bool?,
        ?metadata: ::Hash[Symbol, String],
        ?payment_link: bool?,
        ?return_url: String?,
        ?show_saved_payment_methods: bool,
        ?tax_id: String?,
        ?request_options: Dodopayments::request_opts
      ) -> void

      def to_hash: -> {
        billing: Dodopayments::BillingAddress,
        customer: Dodopayments::Models::customer_request,
        product_cart: ::Array[Dodopayments::OneTimeProductCartItem],
        allowed_payment_method_types: ::Array[Dodopayments::Models::payment_method_types]?,
        billing_currency: Dodopayments::Models::currency?,
        discount_code: String?,
        :force_3ds => bool?,
        metadata: ::Hash[Symbol, String],
        payment_link: bool?,
        return_url: String?,
        show_saved_payment_methods: bool,
        tax_id: String?,
        request_options: Dodopayments::RequestOptions
      }
    end
  end
end
