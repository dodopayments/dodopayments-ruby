module Dodopayments
  module Models
    type payment_create_params =
      {
        billing: Dodopayments::BillingAddress,
        customer: Dodopayments::Models::customer_request,
        product_cart: ::Array[Dodopayments::OneTimeProductCartItem],
        allowed_payment_method_types: ::Array[Dodopayments::PaymentCreateParams::allowed_payment_method_type]?,
        billing_currency: Dodopayments::Models::currency?,
        discount_code: String?,
        metadata: ::Hash[Symbol, String],
        payment_link: bool?,
        return_url: String?,
        show_saved_payment_methods: bool,
        tax_id: String?
      }
      & Dodopayments::Internal::Type::request_parameters

    class PaymentCreateParams < Dodopayments::Internal::Type::BaseModel
      extend Dodopayments::Internal::Type::RequestParameters::Converter
      include Dodopayments::Internal::Type::RequestParameters

      attr_accessor billing: Dodopayments::BillingAddress

      attr_accessor customer: Dodopayments::Models::customer_request

      attr_accessor product_cart: ::Array[Dodopayments::OneTimeProductCartItem]

      attr_accessor allowed_payment_method_types: ::Array[Dodopayments::PaymentCreateParams::allowed_payment_method_type]?

      attr_accessor billing_currency: Dodopayments::Models::currency?

      attr_accessor discount_code: String?

      attr_reader metadata: ::Hash[Symbol, String]?

      def metadata=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_accessor payment_link: bool?

      attr_accessor return_url: String?

      attr_reader show_saved_payment_methods: bool?

      def show_saved_payment_methods=: (bool) -> bool

      attr_accessor tax_id: String?

      def initialize: (
        billing: Dodopayments::BillingAddress,
        customer: Dodopayments::Models::customer_request,
        product_cart: ::Array[Dodopayments::OneTimeProductCartItem],
        ?allowed_payment_method_types: ::Array[Dodopayments::PaymentCreateParams::allowed_payment_method_type]?,
        ?billing_currency: Dodopayments::Models::currency?,
        ?discount_code: String?,
        ?metadata: ::Hash[Symbol, String],
        ?payment_link: bool?,
        ?return_url: String?,
        ?show_saved_payment_methods: bool,
        ?tax_id: String?,
        ?request_options: Dodopayments::request_opts
      ) -> void

      type allowed_payment_method_type =
        :credit
        | :debit
        | :upi_collect
        | :upi_intent
        | :apple_pay
        | :cashapp
        | :google_pay
        | :multibanco
        | :bancontact_card
        | :eps
        | :ideal
        | :przelewy24
        | :affirm
        | :klarna
        | :sepa
        | :ach
        | :amazon_pay
        | :afterpay_clearpay

      module AllowedPaymentMethodType
        extend Dodopayments::Internal::Type::Enum

        CREDIT: :credit
        DEBIT: :debit
        UPI_COLLECT: :upi_collect
        UPI_INTENT: :upi_intent
        APPLE_PAY: :apple_pay
        CASHAPP: :cashapp
        GOOGLE_PAY: :google_pay
        MULTIBANCO: :multibanco
        BANCONTACT_CARD: :bancontact_card
        EPS: :eps
        IDEAL: :ideal
        PRZELEWY24: :przelewy24
        AFFIRM: :affirm
        KLARNA: :klarna
        SEPA: :sepa
        ACH: :ach
        AMAZON_PAY: :amazon_pay
        AFTERPAY_CLEARPAY: :afterpay_clearpay

        def self?.values: -> ::Array[Dodopayments::PaymentCreateParams::allowed_payment_method_type]
      end
    end
  end
end
