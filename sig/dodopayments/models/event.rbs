module Dodopayments
  module Models
    type event =
      {
        business_id: String,
        customer_id: String,
        event_id: String,
        event_name: String,
        timestamp: Time,
        metadata: ::Hash[Symbol, Dodopayments::Models::Event::metadata]?
      }

    class Event < Dodopayments::Internal::Type::BaseModel
      attr_accessor business_id: String

      attr_accessor customer_id: String

      attr_accessor event_id: String

      attr_accessor event_name: String

      attr_accessor timestamp: Time

      attr_accessor metadata: ::Hash[Symbol, Dodopayments::Models::Event::metadata]?

      def initialize: (
        business_id: String,
        customer_id: String,
        event_id: String,
        event_name: String,
        timestamp: Time,
        ?metadata: ::Hash[Symbol, Dodopayments::Models::Event::metadata]?
      ) -> void

      def to_hash: -> {
        business_id: String,
        customer_id: String,
        event_id: String,
        event_name: String,
        timestamp: Time,
        metadata: ::Hash[Symbol, Dodopayments::Models::Event::metadata]?
      }

      type metadata = String | Float | bool

      module Metadata
        extend Dodopayments::Internal::Type::Union

        def self?.variants: -> ::Array[Dodopayments::Models::Event::metadata]
      end
    end
  end
end
