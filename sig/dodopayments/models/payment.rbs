module Dodopayments
  module Models
    type payment =
      {
        billing: Dodopayments::BillingAddress,
        brand_id: String,
        business_id: String,
        created_at: Time,
        currency: Dodopayments::Models::currency,
        customer: Dodopayments::CustomerLimitedDetails,
        disputes: ::Array[Dodopayments::Dispute],
        metadata: ::Hash[Symbol, String],
        payment_id: String,
        refunds: ::Array[Dodopayments::Refund],
        settlement_amount: Integer,
        settlement_currency: Dodopayments::Models::currency,
        total_amount: Integer,
        card_issuing_country: Dodopayments::Models::country_code?,
        card_last_four: String?,
        card_network: String?,
        card_type: String?,
        discount_id: String?,
        error_message: String?,
        payment_link: String?,
        payment_method: String?,
        payment_method_type: String?,
        product_cart: ::Array[Dodopayments::Payment::ProductCart]?,
        settlement_tax: Integer?,
        status: Dodopayments::Models::intent_status?,
        subscription_id: String?,
        tax: Integer?,
        updated_at: Time?
      }

    class Payment < Dodopayments::Internal::Type::BaseModel
      attr_accessor billing: Dodopayments::BillingAddress

      attr_accessor brand_id: String

      attr_accessor business_id: String

      attr_accessor created_at: Time

      attr_accessor currency: Dodopayments::Models::currency

      attr_accessor customer: Dodopayments::CustomerLimitedDetails

      attr_accessor disputes: ::Array[Dodopayments::Dispute]

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor payment_id: String

      attr_accessor refunds: ::Array[Dodopayments::Refund]

      attr_accessor settlement_amount: Integer

      attr_accessor settlement_currency: Dodopayments::Models::currency

      attr_accessor total_amount: Integer

      attr_accessor card_issuing_country: Dodopayments::Models::country_code?

      attr_accessor card_last_four: String?

      attr_accessor card_network: String?

      attr_accessor card_type: String?

      attr_accessor discount_id: String?

      attr_accessor error_message: String?

      attr_accessor payment_link: String?

      attr_accessor payment_method: String?

      attr_accessor payment_method_type: String?

      attr_accessor product_cart: ::Array[Dodopayments::Payment::ProductCart]?

      attr_accessor settlement_tax: Integer?

      attr_accessor status: Dodopayments::Models::intent_status?

      attr_accessor subscription_id: String?

      attr_accessor tax: Integer?

      attr_accessor updated_at: Time?

      def initialize: (
        billing: Dodopayments::BillingAddress,
        brand_id: String,
        business_id: String,
        created_at: Time,
        currency: Dodopayments::Models::currency,
        customer: Dodopayments::CustomerLimitedDetails,
        disputes: ::Array[Dodopayments::Dispute],
        metadata: ::Hash[Symbol, String],
        payment_id: String,
        refunds: ::Array[Dodopayments::Refund],
        settlement_amount: Integer,
        settlement_currency: Dodopayments::Models::currency,
        total_amount: Integer,
        ?card_issuing_country: Dodopayments::Models::country_code?,
        ?card_last_four: String?,
        ?card_network: String?,
        ?card_type: String?,
        ?discount_id: String?,
        ?error_message: String?,
        ?payment_link: String?,
        ?payment_method: String?,
        ?payment_method_type: String?,
        ?product_cart: ::Array[Dodopayments::Payment::ProductCart]?,
        ?settlement_tax: Integer?,
        ?status: Dodopayments::Models::intent_status?,
        ?subscription_id: String?,
        ?tax: Integer?,
        ?updated_at: Time?
      ) -> void

      def to_hash: -> {
        billing: Dodopayments::BillingAddress,
        brand_id: String,
        business_id: String,
        created_at: Time,
        currency: Dodopayments::Models::currency,
        customer: Dodopayments::CustomerLimitedDetails,
        disputes: ::Array[Dodopayments::Dispute],
        metadata: ::Hash[Symbol, String],
        payment_id: String,
        refunds: ::Array[Dodopayments::Refund],
        settlement_amount: Integer,
        settlement_currency: Dodopayments::Models::currency,
        total_amount: Integer,
        card_issuing_country: Dodopayments::Models::country_code?,
        card_last_four: String?,
        card_network: String?,
        card_type: String?,
        discount_id: String?,
        error_message: String?,
        payment_link: String?,
        payment_method: String?,
        payment_method_type: String?,
        product_cart: ::Array[Dodopayments::Payment::ProductCart]?,
        settlement_tax: Integer?,
        status: Dodopayments::Models::intent_status?,
        subscription_id: String?,
        tax: Integer?,
        updated_at: Time?
      }

      type product_cart = { product_id: String, quantity: Integer }

      class ProductCart < Dodopayments::Internal::Type::BaseModel
        attr_accessor product_id: String

        attr_accessor quantity: Integer

        def initialize: (product_id: String, quantity: Integer) -> void

        def to_hash: -> { product_id: String, quantity: Integer }
      end
    end
  end
end
