module Dodopayments
  module Internal
    module Type
      module Converter
        type input = Dodopayments::Internal::Type::Converter | Class

        type state =
          {
            strictness: bool | :strong,
            exactness: { yes: Integer, no: Integer, maybe: Integer },
            branched: Integer
          }

        def coerce: (
          top value,
          state: Dodopayments::Internal::Type::Converter::state
        ) -> top

        def dump: (top value) -> top

        def self.type_info: (
          {
            const: (nil | bool | Integer | Float | Symbol)?,
            enum: ^-> Dodopayments::Internal::Type::Converter::input?,
            union: ^-> Dodopayments::Internal::Type::Converter::input?
          }
          | ^-> Dodopayments::Internal::Type::Converter::input
          | Dodopayments::Internal::Type::Converter::input spec
        ) -> (^-> top)

        def self.coerce: (
          Dodopayments::Internal::Type::Converter::input target,
          top value,
          ?state: Dodopayments::Internal::Type::Converter::state
        ) -> top

        def self.dump: (
          Dodopayments::Internal::Type::Converter::input target,
          top value
        ) -> top
      end
    end
  end
end
