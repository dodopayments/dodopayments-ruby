module DodoPayments
  class Client < DodoPayments::BaseClient
    DEFAULT_MAX_RETRIES: 2

    DEFAULT_TIMEOUT_IN_SECONDS: Float

    DEFAULT_INITIAL_RETRY_DELAY: Float

    DEFAULT_MAX_RETRY_DELAY: Float

    ENVIRONMENTS: {
      live_mode: "https://live.dodopayments.com",
      test_mode: "https://test.dodopayments.com"
    }

    attr_reader bearer_token: String

    attr_reader payments: DodoPayments::Resources::Payments

    attr_reader subscriptions: DodoPayments::Resources::Subscriptions

    attr_reader invoices: DodoPayments::Resources::Invoices

    attr_reader licenses: DodoPayments::Resources::Licenses

    attr_reader license_keys: DodoPayments::Resources::LicenseKeys

    attr_reader license_key_instances: DodoPayments::Resources::LicenseKeyInstances

    attr_reader customers: DodoPayments::Resources::Customers

    attr_reader refunds: DodoPayments::Resources::Refunds

    attr_reader disputes: DodoPayments::Resources::Disputes

    attr_reader payouts: DodoPayments::Resources::Payouts

    attr_reader webhook_events: DodoPayments::Resources::WebhookEvents

    attr_reader products: DodoPayments::Resources::Products

    attr_reader misc: DodoPayments::Resources::Misc

    attr_reader discounts: DodoPayments::Resources::Discounts

    private def auth_headers: -> ::Hash[String, String]

    def initialize: (
      environment: :live_mode | :test_mode | nil,
      base_url: String?,
      bearer_token: String?,
      max_retries: Integer,
      timeout: Float,
      initial_retry_delay: Float,
      max_retry_delay: Float
    ) -> void
  end
end
