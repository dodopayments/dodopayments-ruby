module DodoPayments
  module Models
    type subscription =
      {
        created_at: Time,
        currency: DodoPayments::Models::Subscription::currency,
        customer: DodoPayments::Models::Subscription::Customer,
        metadata: ::Hash[Symbol, String],
        next_billing_date: Time,
        payment_frequency_count: Integer,
        payment_frequency_interval: DodoPayments::Models::Subscription::payment_frequency_interval,
        product_id: String,
        quantity: Integer,
        recurring_pre_tax_amount: Integer,
        status: DodoPayments::Models::Subscription::status,
        subscription_id: String,
        subscription_period_count: Integer,
        subscription_period_interval: DodoPayments::Models::Subscription::subscription_period_interval,
        tax_inclusive: bool,
        trial_period_days: Integer,
        discount_id: String?
      }

    class Subscription < DodoPayments::BaseModel
      attr_accessor created_at: Time

      attr_accessor currency: DodoPayments::Models::Subscription::currency

      attr_accessor customer: DodoPayments::Models::Subscription::Customer

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor next_billing_date: Time

      attr_accessor payment_frequency_count: Integer

      attr_accessor payment_frequency_interval: DodoPayments::Models::Subscription::payment_frequency_interval

      attr_accessor product_id: String

      attr_accessor quantity: Integer

      attr_accessor recurring_pre_tax_amount: Integer

      attr_accessor status: DodoPayments::Models::Subscription::status

      attr_accessor subscription_id: String

      attr_accessor subscription_period_count: Integer

      attr_accessor subscription_period_interval: DodoPayments::Models::Subscription::subscription_period_interval

      attr_accessor tax_inclusive: bool

      attr_accessor trial_period_days: Integer

      attr_accessor discount_id: String?

      def initialize:
        (
          created_at: Time,
          currency: DodoPayments::Models::Subscription::currency,
          customer: DodoPayments::Models::Subscription::Customer,
          metadata: ::Hash[Symbol, String],
          next_billing_date: Time,
          payment_frequency_count: Integer,
          payment_frequency_interval: DodoPayments::Models::Subscription::payment_frequency_interval,
          product_id: String,
          quantity: Integer,
          recurring_pre_tax_amount: Integer,
          status: DodoPayments::Models::Subscription::status,
          subscription_id: String,
          subscription_period_count: Integer,
          subscription_period_interval: DodoPayments::Models::Subscription::subscription_period_interval,
          tax_inclusive: bool,
          trial_period_days: Integer,
          discount_id: String?
        ) -> void
        | (
          ?DodoPayments::Models::subscription | DodoPayments::BaseModel data
        ) -> void

      def to_hash: -> DodoPayments::Models::subscription

      type currency =
        :AED
        | :ALL
        | :AMD
        | :ANG
        | :AOA
        | :ARS
        | :AUD
        | :AWG
        | :AZN
        | :BAM
        | :BBD
        | :BDT
        | :BGN
        | :BHD
        | :BIF
        | :BMD
        | :BND
        | :BOB
        | :BRL
        | :BSD
        | :BWP
        | :BYN
        | :BZD
        | :CAD
        | :CHF
        | :CLP
        | :CNY
        | :COP
        | :CRC
        | :CUP
        | :CVE
        | :CZK
        | :DJF
        | :DKK
        | :DOP
        | :DZD
        | :EGP
        | :ETB
        | :EUR
        | :FJD
        | :FKP
        | :GBP
        | :GEL
        | :GHS
        | :GIP
        | :GMD
        | :GNF
        | :GTQ
        | :GYD
        | :HKD
        | :HNL
        | :HRK
        | :HTG
        | :HUF
        | :IDR
        | :ILS
        | :INR
        | :IQD
        | :JMD
        | :JOD
        | :JPY
        | :KES
        | :KGS
        | :KHR
        | :KMF
        | :KRW
        | :KWD
        | :KYD
        | :KZT
        | :LAK
        | :LBP
        | :LKR
        | :LRD
        | :LSL
        | :LYD
        | :MAD
        | :MDL
        | :MGA
        | :MKD
        | :MMK
        | :MNT
        | :MOP
        | :MRU
        | :MUR
        | :MVR
        | :MWK
        | :MXN
        | :MYR
        | :MZN
        | :NAD
        | :NGN
        | :NIO
        | :NOK
        | :NPR
        | :NZD
        | :OMR
        | :PAB
        | :PEN
        | :PGK
        | :PHP
        | :PKR
        | :PLN
        | :PYG
        | :QAR
        | :RON
        | :RSD
        | :RUB
        | :RWF
        | :SAR
        | :SBD
        | :SCR
        | :SEK
        | :SGD
        | :SHP
        | :SLE
        | :SLL
        | :SOS
        | :SRD
        | :SSP
        | :STN
        | :SVC
        | :SZL
        | :THB
        | :TND
        | :TOP
        | :TRY
        | :TTD
        | :TWD
        | :TZS
        | :UAH
        | :UGX
        | :USD
        | :UYU
        | :UZS
        | :VES
        | :VND
        | :VUV
        | :WST
        | :XAF
        | :XCD
        | :XOF
        | :XPF
        | :YER
        | :ZAR
        | :ZMW

      class Currency < DodoPayments::Enum
        AED: :AED
        ALL: :ALL
        AMD: :AMD
        ANG: :ANG
        AOA: :AOA
        ARS: :ARS
        AUD: :AUD
        AWG: :AWG
        AZN: :AZN
        BAM: :BAM
        BBD: :BBD
        BDT: :BDT
        BGN: :BGN
        BHD: :BHD
        BIF: :BIF
        BMD: :BMD
        BND: :BND
        BOB: :BOB
        BRL: :BRL
        BSD: :BSD
        BWP: :BWP
        BYN: :BYN
        BZD: :BZD
        CAD: :CAD
        CHF: :CHF
        CLP: :CLP
        CNY: :CNY
        COP: :COP
        CRC: :CRC
        CUP: :CUP
        CVE: :CVE
        CZK: :CZK
        DJF: :DJF
        DKK: :DKK
        DOP: :DOP
        DZD: :DZD
        EGP: :EGP
        ETB: :ETB
        EUR: :EUR
        FJD: :FJD
        FKP: :FKP
        GBP: :GBP
        GEL: :GEL
        GHS: :GHS
        GIP: :GIP
        GMD: :GMD
        GNF: :GNF
        GTQ: :GTQ
        GYD: :GYD
        HKD: :HKD
        HNL: :HNL
        HRK: :HRK
        HTG: :HTG
        HUF: :HUF
        IDR: :IDR
        ILS: :ILS
        INR: :INR
        IQD: :IQD
        JMD: :JMD
        JOD: :JOD
        JPY: :JPY
        KES: :KES
        KGS: :KGS
        KHR: :KHR
        KMF: :KMF
        KRW: :KRW
        KWD: :KWD
        KYD: :KYD
        KZT: :KZT
        LAK: :LAK
        LBP: :LBP
        LKR: :LKR
        LRD: :LRD
        LSL: :LSL
        LYD: :LYD
        MAD: :MAD
        MDL: :MDL
        MGA: :MGA
        MKD: :MKD
        MMK: :MMK
        MNT: :MNT
        MOP: :MOP
        MRU: :MRU
        MUR: :MUR
        MVR: :MVR
        MWK: :MWK
        MXN: :MXN
        MYR: :MYR
        MZN: :MZN
        NAD: :NAD
        NGN: :NGN
        NIO: :NIO
        NOK: :NOK
        NPR: :NPR
        NZD: :NZD
        OMR: :OMR
        PAB: :PAB
        PEN: :PEN
        PGK: :PGK
        PHP: :PHP
        PKR: :PKR
        PLN: :PLN
        PYG: :PYG
        QAR: :QAR
        RON: :RON
        RSD: :RSD
        RUB: :RUB
        RWF: :RWF
        SAR: :SAR
        SBD: :SBD
        SCR: :SCR
        SEK: :SEK
        SGD: :SGD
        SHP: :SHP
        SLE: :SLE
        SLL: :SLL
        SOS: :SOS
        SRD: :SRD
        SSP: :SSP
        STN: :STN
        SVC: :SVC
        SZL: :SZL
        THB: :THB
        TND: :TND
        TOP: :TOP
        TRY: :TRY
        TTD: :TTD
        TWD: :TWD
        TZS: :TZS
        UAH: :UAH
        UGX: :UGX
        USD: :USD
        UYU: :UYU
        UZS: :UZS
        VES: :VES
        VND: :VND
        VUV: :VUV
        WST: :WST
        XAF: :XAF
        XCD: :XCD
        XOF: :XOF
        XPF: :XPF
        YER: :YER
        ZAR: :ZAR
        ZMW: :ZMW

        def self.values: -> ::Array[DodoPayments::Models::Subscription::currency]
      end

      type customer = { customer_id: String, email: String, name: String }

      class Customer < DodoPayments::BaseModel
        attr_accessor customer_id: String

        attr_accessor email: String

        attr_accessor name: String

        def initialize:
          (customer_id: String, email: String, name: String) -> void
          | (
            ?DodoPayments::Models::Subscription::customer
            | DodoPayments::BaseModel data
          ) -> void

        def to_hash: -> DodoPayments::Models::Subscription::customer
      end

      type payment_frequency_interval = :Day | :Week | :Month | :Year

      class PaymentFrequencyInterval < DodoPayments::Enum
        DAY: :Day
        WEEK: :Week
        MONTH: :Month
        YEAR: :Year

        def self.values: -> ::Array[DodoPayments::Models::Subscription::payment_frequency_interval]
      end

      type status =
        :pending
        | :active
        | :on_hold
        | :paused
        | :cancelled
        | :failed
        | :expired

      class Status < DodoPayments::Enum
        PENDING: :pending
        ACTIVE: :active
        ON_HOLD: :on_hold
        PAUSED: :paused
        CANCELLED: :cancelled
        FAILED: :failed
        EXPIRED: :expired

        def self.values: -> ::Array[DodoPayments::Models::Subscription::status]
      end

      type subscription_period_interval = :Day | :Week | :Month | :Year

      class SubscriptionPeriodInterval < DodoPayments::Enum
        DAY: :Day
        WEEK: :Week
        MONTH: :Month
        YEAR: :Year

        def self.values: -> ::Array[DodoPayments::Models::Subscription::subscription_period_interval]
      end
    end
  end
end
