module DodoPayments
  module Models
    type license_key =
      {
        id: String,
        business_id: String,
        created_at: Time,
        customer_id: String,
        instances_count: Integer,
        key: String,
        payment_id: String,
        product_id: String,
        status: DodoPayments::Models::LicenseKey::status,
        activations_limit: Integer?,
        expires_at: Time?,
        subscription_id: String?
      }

    class LicenseKey < DodoPayments::BaseModel
      attr_accessor id: String

      attr_accessor business_id: String

      attr_accessor created_at: Time

      attr_accessor customer_id: String

      attr_accessor instances_count: Integer

      attr_accessor key: String

      attr_accessor payment_id: String

      attr_accessor product_id: String

      attr_accessor status: DodoPayments::Models::LicenseKey::status

      attr_accessor activations_limit: Integer?

      attr_accessor expires_at: Time?

      attr_accessor subscription_id: String?

      def initialize:
        (
          id: String,
          business_id: String,
          created_at: Time,
          customer_id: String,
          instances_count: Integer,
          key: String,
          payment_id: String,
          product_id: String,
          status: DodoPayments::Models::LicenseKey::status,
          activations_limit: Integer?,
          expires_at: Time?,
          subscription_id: String?
        ) -> void
        | (
          ?DodoPayments::Models::license_key | DodoPayments::BaseModel data
        ) -> void

      def to_hash: -> DodoPayments::Models::license_key

      type status = :active | :expired | :disabled

      class Status < DodoPayments::Enum
        ACTIVE: :active
        EXPIRED: :expired
        DISABLED: :disabled

        def self.values: -> ::Array[DodoPayments::Models::LicenseKey::status]
      end
    end
  end
end
