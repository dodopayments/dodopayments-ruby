module DodoPayments
  module Models
    type subscription_update_params =
      {
        metadata: ::Hash[Symbol, String]?,
        status: DodoPayments::Models::SubscriptionUpdateParams::status?
      }
      & DodoPayments::request_parameters

    class SubscriptionUpdateParams < DodoPayments::BaseModel
      extend DodoPayments::RequestParameters::Converter
      include DodoPayments::RequestParameters

      attr_accessor metadata: ::Hash[Symbol, String]?

      attr_accessor status: DodoPayments::Models::SubscriptionUpdateParams::status?

      def initialize:
        (
          metadata: ::Hash[Symbol, String]?,
          status: DodoPayments::Models::SubscriptionUpdateParams::status?,
          request_options: DodoPayments::request_opts
        ) -> void
        | (
          ?DodoPayments::Models::subscription_update_params
          | DodoPayments::BaseModel data
        ) -> void

      def to_hash: -> DodoPayments::Models::subscription_update_params

      type status =
        :pending
        | :active
        | :on_hold
        | :paused
        | :cancelled
        | :failed
        | :expired

      class Status < DodoPayments::Enum
        PENDING: :pending
        ACTIVE: :active
        ON_HOLD: :on_hold
        PAUSED: :paused
        CANCELLED: :cancelled
        FAILED: :failed
        EXPIRED: :expired

        def self.values: -> ::Array[DodoPayments::Models::SubscriptionUpdateParams::status]
      end
    end
  end
end
