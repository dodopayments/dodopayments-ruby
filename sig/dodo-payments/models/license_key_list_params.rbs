module DodoPayments
  module Models
    type license_key_list_params =
      {
        customer_id: String?,
        page_number: Integer?,
        page_size: Integer?,
        product_id: String?,
        status: DodoPayments::Models::LicenseKeyListParams::status?
      }
      & DodoPayments::request_parameters

    class LicenseKeyListParams < DodoPayments::BaseModel
      extend DodoPayments::RequestParameters::Converter
      include DodoPayments::RequestParameters

      attr_accessor customer_id: String?

      attr_accessor page_number: Integer?

      attr_accessor page_size: Integer?

      attr_accessor product_id: String?

      attr_accessor status: DodoPayments::Models::LicenseKeyListParams::status?

      def initialize:
        (
          customer_id: String?,
          page_number: Integer?,
          page_size: Integer?,
          product_id: String?,
          status: DodoPayments::Models::LicenseKeyListParams::status?,
          request_options: DodoPayments::request_opts
        ) -> void
        | (
          ?DodoPayments::Models::license_key_list_params
          | DodoPayments::BaseModel data
        ) -> void

      def to_hash: -> DodoPayments::Models::license_key_list_params

      type status = :active | :expired | :disabled

      class Status < DodoPayments::Enum
        ACTIVE: :active
        EXPIRED: :expired
        DISABLED: :disabled

        def self.values: -> ::Array[DodoPayments::Models::LicenseKeyListParams::status]
      end
    end
  end
end
